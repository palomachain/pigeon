// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	cronchain "github.com/palomachain/sparrow/types/cronchain"

	testing "testing"
)

// ValsetTxServiceServer is an autogenerated mock type for the ValsetTxServiceServer type
type ValsetTxServiceServer struct {
	mock.Mock
}

// AddExternalChainInfoForValidator provides a mock function with given fields: _a0, _a1
func (_m *ValsetTxServiceServer) AddExternalChainInfoForValidator(_a0 context.Context, _a1 *cronchain.MsgAddExternalChainInfoForValidator) (*cronchain.MsgAddExternalChainInfoForValidatorResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cronchain.MsgAddExternalChainInfoForValidatorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cronchain.MsgAddExternalChainInfoForValidator) *cronchain.MsgAddExternalChainInfoForValidatorResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cronchain.MsgAddExternalChainInfoForValidatorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cronchain.MsgAddExternalChainInfoForValidator) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterConductor provides a mock function with given fields: _a0, _a1
func (_m *ValsetTxServiceServer) RegisterConductor(_a0 context.Context, _a1 *cronchain.MsgRegisterConductor) (*cronchain.MsgRegisterConductorResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cronchain.MsgRegisterConductorResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cronchain.MsgRegisterConductor) *cronchain.MsgRegisterConductorResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cronchain.MsgRegisterConductorResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cronchain.MsgRegisterConductor) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewValsetTxServiceServer creates a new instance of ValsetTxServiceServer. It also registers a cleanup function to assert the mocks expectations.
func NewValsetTxServiceServer(t testing.TB) *ValsetTxServiceServer {
	mock := &ValsetTxServiceServer{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
