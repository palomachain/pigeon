// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	chain "github.com/palomachain/sparrow/chain"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Processor is an autogenerated mock type for the Processor type
type Processor struct {
	mock.Mock
}

// ProcessMessages provides a mock function with given fields: _a0, _a1, _a2
func (_m *Processor) ProcessMessages(_a0 context.Context, _a1 string, _a2 []chain.MessageWithSignatures) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []chain.MessageWithSignatures) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignMessages provides a mock function with given fields: ctx, queueTypeName, messages
func (_m *Processor) SignMessages(ctx context.Context, queueTypeName string, messages ...chain.QueuedMessage) ([]chain.SignedQueuedMessage, error) {
	_va := make([]interface{}, len(messages))
	for _i := range messages {
		_va[_i] = messages[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, queueTypeName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []chain.SignedQueuedMessage
	if rf, ok := ret.Get(0).(func(context.Context, string, ...chain.QueuedMessage) []chain.SignedQueuedMessage); ok {
		r0 = rf(ctx, queueTypeName, messages...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chain.SignedQueuedMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...chain.QueuedMessage) error); ok {
		r1 = rf(ctx, queueTypeName, messages...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportedQueues provides a mock function with given fields:
func (_m *Processor) SupportedQueues() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewProcessor creates a new instance of Processor. It also registers a cleanup function to assert the mocks expectations.
func NewProcessor(t testing.TB) *Processor {
	mock := &Processor{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
