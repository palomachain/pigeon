// Code generated by mockery v2.14.0. DO NOT EDIT.

package collision

import (
	context "context"

	types "github.com/palomachain/pigeon/types/paloma/x/valset/types"
	mock "github.com/stretchr/testify/mock"
)

// mockPalomer is an autogenerated mock type for the palomer type
type mockPalomer struct {
	mock.Mock
}

// BlockHeight provides a mock function with given fields: _a0
func (_m *mockPalomer) BlockHeight(_a0 context.Context) (int64, error) {
	ret := _m.Called(_a0)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryGetSnapshotByID provides a mock function with given fields: ctx, id
func (_m *mockPalomer) QueryGetSnapshotByID(ctx context.Context, id uint64) (*types.Snapshot, error) {
	ret := _m.Called(ctx, id)

	var r0 *types.Snapshot
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *types.Snapshot); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Snapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewMockPalomer interface {
	mock.TestingT
	Cleanup(func())
}

// newMockPalomer creates a new instance of mockPalomer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockPalomer(t mockConstructorTestingTnewMockPalomer) *mockPalomer {
	mock := &mockPalomer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
