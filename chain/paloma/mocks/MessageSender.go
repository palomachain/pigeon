// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	ion "github.com/palomachain/pigeon/util/ion"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// MessageSender is an autogenerated mock type for the MessageSender type
type MessageSender struct {
	mock.Mock
}

// SendMsg provides a mock function with given fields: ctx, msg, memo, opts
func (_m *MessageSender) SendMsg(ctx context.Context, msg types.Msg, memo string, opts ...ion.SendMsgOption) (*types.TxResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, msg, memo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 *types.TxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Msg, string, ...ion.SendMsgOption) (*types.TxResponse, error)); ok {
		return rf(ctx, msg, memo, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Msg, string, ...ion.SendMsgOption) *types.TxResponse); ok {
		r0 = rf(ctx, msg, memo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Msg, string, ...ion.SendMsgOption) error); ok {
		r1 = rf(ctx, msg, memo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMessageSender creates a new instance of MessageSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageSender {
	mock := &MessageSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
