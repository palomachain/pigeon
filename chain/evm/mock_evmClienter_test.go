// Code generated by mockery v2.11.0. DO NOT EDIT.

package evm

import (
	big "math/big"

	abi "github.com/ethereum/go-ethereum/accounts/abi"

	common "github.com/ethereum/go-ethereum/common"

	context "context"

	ethereum "github.com/ethereum/go-ethereum"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	types "github.com/ethereum/go-ethereum/core/types"
)

// mockEvmClienter is an autogenerated mock type for the evmClienter type
type mockEvmClienter struct {
	mock.Mock
}

// ExecuteSmartContract provides a mock function with given fields: ctx, contractAbi, addr, method, arguments
func (_m *mockEvmClienter) ExecuteSmartContract(ctx context.Context, contractAbi abi.ABI, addr common.Address, method string, arguments []interface{}) (*types.Transaction, error) {
	ret := _m.Called(ctx, contractAbi, addr, method, arguments)

	var r0 *types.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, abi.ABI, common.Address, string, []interface{}) *types.Transaction); ok {
		r0 = rf(ctx, contractAbi, addr, method, arguments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, abi.ABI, common.Address, string, []interface{}) error); ok {
		r1 = rf(ctx, contractAbi, addr, method, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterLogs provides a mock function with given fields: ctx, fq, currBlockHeight, fn
func (_m *mockEvmClienter) FilterLogs(ctx context.Context, fq ethereum.FilterQuery, currBlockHeight *big.Int, fn func([]types.Log) bool) (bool, error) {
	ret := _m.Called(ctx, fq, currBlockHeight, fn)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.FilterQuery, *big.Int, func([]types.Log) bool) bool); ok {
		r0 = rf(ctx, fq, currBlockHeight, fn)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ethereum.FilterQuery, *big.Int, func([]types.Log) bool) error); ok {
		r1 = rf(ctx, fq, currBlockHeight, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockEvmClienter creates a new instance of mockEvmClienter. It also registers a cleanup function to assert the mocks expectations.
func newMockEvmClienter(t testing.TB) *mockEvmClienter {
	mock := &mockEvmClienter{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
