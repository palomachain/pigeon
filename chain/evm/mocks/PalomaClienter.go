// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	proto "github.com/cosmos/gogoproto/proto"
	evmtypes "github.com/palomachain/paloma/x/evm/types"
	gravitytypes "github.com/palomachain/paloma/x/gravity/types"
	types "github.com/palomachain/paloma/x/paloma/types"
	mock "github.com/stretchr/testify/mock"
)

// PalomaClienter is an autogenerated mock type for the PalomaClienter type
type PalomaClienter struct {
	mock.Mock
}

// AddMessageEvidence provides a mock function with given fields: ctx, queueTypeName, messageID, proof
func (_m *PalomaClienter) AddMessageEvidence(ctx context.Context, queueTypeName string, messageID uint64, proof proto.Message) error {
	ret := _m.Called(ctx, queueTypeName, messageID, proof)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, proto.Message) error); ok {
		r0 = rf(ctx, queueTypeName, messageID, proof)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddStatusUpdate provides a mock function with given fields: ctx, level, status
func (_m *PalomaClienter) AddStatusUpdate(ctx context.Context, level types.MsgAddStatusUpdate_Level, status string) error {
	ret := _m.Called(ctx, level, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.MsgAddStatusUpdate_Level, string) error); ok {
		r0 = rf(ctx, level, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryBatchRequestByNonce provides a mock function with given fields: ctx, nonce, contract
func (_m *PalomaClienter) QueryBatchRequestByNonce(ctx context.Context, nonce uint64, contract string) (gravitytypes.OutgoingTxBatch, error) {
	ret := _m.Called(ctx, nonce, contract)

	var r0 gravitytypes.OutgoingTxBatch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) (gravitytypes.OutgoingTxBatch, error)); ok {
		return rf(ctx, nonce, contract)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) gravitytypes.OutgoingTxBatch); ok {
		r0 = rf(ctx, nonce, contract)
	} else {
		r0 = ret.Get(0).(gravitytypes.OutgoingTxBatch)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, string) error); ok {
		r1 = rf(ctx, nonce, contract)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryGetEVMValsetByID provides a mock function with given fields: ctx, id, chainID
func (_m *PalomaClienter) QueryGetEVMValsetByID(ctx context.Context, id uint64, chainID string) (*evmtypes.Valset, error) {
	ret := _m.Called(ctx, id, chainID)

	var r0 *evmtypes.Valset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) (*evmtypes.Valset, error)); ok {
		return rf(ctx, id, chainID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) *evmtypes.Valset); ok {
		r0 = rf(ctx, id, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmtypes.Valset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, string) error); ok {
		r1 = rf(ctx, id, chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryGetLastEventNonce provides a mock function with given fields: ctx, orchestrator
func (_m *PalomaClienter) QueryGetLastEventNonce(ctx context.Context, orchestrator string) (uint64, error) {
	ret := _m.Called(ctx, orchestrator)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(ctx, orchestrator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, orchestrator)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orchestrator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendBatchSendToEVMClaim provides a mock function with given fields: ctx, claim
func (_m *PalomaClienter) SendBatchSendToEVMClaim(ctx context.Context, claim gravitytypes.MsgBatchSendToEthClaim) error {
	ret := _m.Called(ctx, claim)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, gravitytypes.MsgBatchSendToEthClaim) error); ok {
		r0 = rf(ctx, claim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendSendToPalomaClaim provides a mock function with given fields: ctx, claim
func (_m *PalomaClienter) SendSendToPalomaClaim(ctx context.Context, claim gravitytypes.MsgSendToPalomaClaim) error {
	ret := _m.Called(ctx, claim)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, gravitytypes.MsgSendToPalomaClaim) error); ok {
		r0 = rf(ctx, claim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetErrorData provides a mock function with given fields: ctx, queueTypeName, messageID, data
func (_m *PalomaClienter) SetErrorData(ctx context.Context, queueTypeName string, messageID uint64, data []byte) error {
	ret := _m.Called(ctx, queueTypeName, messageID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, []byte) error); ok {
		r0 = rf(ctx, queueTypeName, messageID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPublicAccessData provides a mock function with given fields: ctx, queueTypeName, messageID, data
func (_m *PalomaClienter) SetPublicAccessData(ctx context.Context, queueTypeName string, messageID uint64, data []byte) error {
	ret := _m.Called(ctx, queueTypeName, messageID, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, []byte) error); ok {
		r0 = rf(ctx, queueTypeName, messageID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPalomaClienter creates a new instance of PalomaClienter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPalomaClienter(t interface {
	mock.TestingT
	Cleanup(func())
},
) *PalomaClienter {
	mock := &PalomaClienter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
