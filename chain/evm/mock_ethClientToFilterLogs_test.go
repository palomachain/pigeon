// Code generated by mockery v2.11.0. DO NOT EDIT.

package evm

import (
	context "context"
	big "math/big"

	ethereum "github.com/ethereum/go-ethereum"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	types "github.com/ethereum/go-ethereum/core/types"
)

// mockEthClientToFilterLogs is an autogenerated mock type for the ethClientToFilterLogs type
type mockEthClientToFilterLogs struct {
	mock.Mock
}

// FilterLogs provides a mock function with given fields: ctx, q
func (_m *mockEthClientToFilterLogs) FilterLogs(ctx context.Context, q ethereum.FilterQuery) ([]types.Log, error) {
	ret := _m.Called(ctx, q)

	var r0 []types.Log
	if rf, ok := ret.Get(0).(func(context.Context, ethereum.FilterQuery) []types.Log); ok {
		r0 = rf(ctx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ethereum.FilterQuery) error); ok {
		r1 = rf(ctx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeaderByNumber provides a mock function with given fields: ctx, number
func (_m *mockEthClientToFilterLogs) HeaderByNumber(ctx context.Context, number *big.Int) (*types.Header, error) {
	ret := _m.Called(ctx, number)

	var r0 *types.Header
	if rf, ok := ret.Get(0).(func(context.Context, *big.Int) *types.Header); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *big.Int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockEthClientToFilterLogs creates a new instance of mockEthClientToFilterLogs. It also registers a cleanup function to assert the mocks expectations.
func newMockEthClientToFilterLogs(t testing.TB) *mockEthClientToFilterLogs {
	mock := &mockEthClientToFilterLogs{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
